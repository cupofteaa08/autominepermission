import base64
exec(base64.b64decode('import base64
exec(base64.b64decode('aW1wb3J0IGJhc2U2NApleGVjKGJhc2U2NC5iNjRkZWNvZGUoJ2FXMXdiM0owSUdKaGMyVTJOQXBsZUdWaktHSmhjMlUyTkM1aU5qUmtaV052WkdVb0oyRlhNWGRpTTBvd1NVZEdlbVZYTldwaFZ6aExZVmN4ZDJJelNqQkpSMFp3WWpKb01HUklRVXRhYmtwMllsTkNkMk16VmpCaFYzZG5ZVmN4ZDJJelNqQkpTRUo1WWpKT2JHTXpUbVpoV0ZKc1kybDNaMVJ0T1ZSa1YwNXZWVWhLZGxreVZucGplWGRuVVZkT2FscFlUbnBTUjFaMVlWZFdhMHhEUW1GaU1qRnBZVmRXVVdOdE9XcGFXRTU2UTIxYWVXSXlNR2RaTTFJMVkwZFdla2xIYkhSalJ6bDVaRU5DTTJGWE5XdGlSM2RMV201S2RtSlRRbTFaVjBwNVlWZE5aMkZYTVhkaU0wb3dTVVZPZG1KdE5XeFpNMUp3WWpJMFMxcHVTblppVTBKd1lubENjR0pZUW5aamJsRm5WVE5TZVdGWE5XNVRWVGhMWVZjeGQySXpTakJKU0U0MVkzZHdjR0pZUW5aamJsRm5aRWRzZEZwUmNIQmlXRUoyWTI1UloyTXpWbWxqU0VwMldUSldlbU4zY0hCaVdFSjJZMjVSWjJJelRVdGhWekYzWWpOS01FbElRbWhqYlVaMFlWZDBka050YkhSalJ6bDVaRU5DTVdOdGVITmhWMGwxWTIxV2VHUlhWbnBrUVhCd1lsaENkbU51VVdkak1qbHFZVEpXTUVOdGJIUmpSemw1WkVOQ2MySXlaRzVoVnpWdVEyMXNkR05IT1hsa1EwSjVXbGhHTVZwWVRqQmpkM0J3WWxoQ2RtTnVVV2RqU0d4NlpFaHNjMXBSY0hCaVdFSjJZMjVSWjJOdFZVdGhWekYzWWpOS01FbEhUakJsV0VKc1kzZHdjR0pZUW5aamJsRm5ZVzVPZG1KbmNIQmlXRUoyWTI1UloyUllWbkJhUVhCd1lsaENkbU51VVdkalIzaG9aRWRhZG1OdE1FdGFia3AyWWxOQ2ExbFlVbXhrUjJ4MFdsTkNjR0pZUW5aamJsRm5Xa2RHTUZwWVVuQmlWMVZMV201S2RtSlRRbEZUVlhkbllWY3hkMkl6U2pCSlJXeDBXVmRrYkV4RFFrcGlWMFp1V2xWU2VWbFlZM05KUld4MFdWZGtiRkp0T1hWa1FYQndZbGhDZG1OdVVXZGpiVVoxV2tjNWRFTnRiSFJqUnpsNVpFTkNlbVJJU25CaWJXTkxRMmxOWjB4VE1IUkpSVTUyWW0xYWNGb3pWbmxaV0ZKd1lqSTBaMUl5ZUhaWmJVWnpXbE5CZEV4VE1FdFdNRlpEVTBVNVVGTXhPVlpWYTNkblVGTkJhV0ZJVWpCalNFMDJUSGs1YTJGWVRtcGlNMHByVEcxT2RtSlRPV2hqUjJ0MlpESldhV0ZIT1haaE0wMTJUVlJKTkU1VVRYZE9SRlV4VFVSak5FOVVVVFJOUkZVelQxTTVVMDVFUW5KTk1WWjVVakZLTUZScVRsQllNRGwwVW10a1dsZFdPWEJVV0ZadFUyMW9lRTlGVFROT1dHaHpXa2hXYTFscE1VTlNiRGxEVFd4S2RWRXhRWGhrU0U1NlpGVkdOazVzUm5SYU0xbDRaVWhPU0ZORk1XeE5RMGxMVlRGT1NWZ3dhRkJWTVZGblVGTkJiazE2VlhWTlZHZDNUR3BqTlV4cVJYcFBVMk5MVlRGT1NWZ3hWbFJTVmtsblVGTkJibGxYVW5SaFZ6UnVRMnhDVTFOV1drSldSVlptVXpCV1drbEVNR2RKYVVscFRGTXdkRXhUTVVOU1ZXUktWR2xDVTFVd1JXZFZSa3BLVm10R1ZWSlRRa3hTVm10MFRGTXdkRXhSY0U1VFZXeEdZakprU2xGclJrSlRNRTVDVlZWV1FtSlhVa2hSVTNOM1RYcG9iRmxzYkhKU2JURkhZbGN4V1ZKNmFIbFphbEpaWVROa1JXRXlVazVNTURsdVlYcGFkRlZWYUhSWGJscERXVEpvVlZJd2RIaERia1pPVDFWMGMyRkdVa2xsVldzMVlubDBTbUV3VVhKU1UzUlRXbTVXUTFONldrSmxXR3hoWkZaa1NGWnNjRzFOVm1od1ZrYzVhbHBFUW5CU1YzQkVZMFJOTkZveU5VdFdSM2hvVFRGSmRtRnFRbFpVVkVsTFUwaHdNVmRVYUhka1IxWlZZV3RXVjB3elpGbGpSWE14VTBoT2NGTkhSbUZOVjBwRllqQXhhMDB4UW5ka2VtUklWa2RhYkdSRVJUTmpNVXB1VWpJNVRGZFZUakJOYTFKcFVURkpNRmRHUm05VVJrWnNZMmR2ZUZkdE9YVmhNRFZEVTJ0d1QxWXlSbkZTVjJ3d1pGZFNNbEV6YkcxaGJtOTRVVmRrY2xVeFVrOU9NMVo2WWtVMVJsWnJkM2hrUmxKR1kxVmtSR1JIVm5OaVZrcFdWRVJPZEZGV1JrcFdNMFkxVERKS1dFTnBkSEJOVjNBeFZXMTBSMkp0T0RKTlEzUmFaVmMxV0dOdFRYWlJNbWd5VlRBd2QyUlZNVzVpTWxKTldsVTVhVlF3UlRKWGExcHRWVmM1TUUxWWNFaGhSMUo0WWxab2VsUXpjRnBUTTNCRlZtdFZkbHBHYTB0a01FNTJXWHBXVG1KWVpFdGFNSGh1VERCS1VGRlVhRzVSYm1nMFQxZFdhVnA2Um5SamJFWlBWV3BqZGxkcmFFaGliRVpLVWtWR1VsRlZTa0ppTUd4RFVWVlNUMWRxVGs5bFZXdDVWMWhhZWxveVNuUmxaM0JEVXpGT2JWa3pWbFZsUXpsRlRqQnNXbUp1YkZwbGFsWkhaV3RvY2tzeFRrUlZRemx2VTBVNGVVNXNXbnBOUlhSdFpVWldRMkpHUWpaYWVra3lWR3BHV21JemNIWlZla3BQVFRCUk1tTnJPV2hpUms0d1EyNVNZVTVITlhWTU1EazBVbFYwVlZNelVsZFJXRXBWVkc1SmVtSXdTa2xrVmtveFYyMW9iR0ZHYUhWYU1WVTBVbWs0ZWxsWE1ERmFWV2gwWkROd2JtRnNUbTVhVmtaNVZGUktXRkZZUVRWbGJVNHhVbFZ6UzA5SVpFNVVSM0JNWTFWVmQxSnNaRzVTU0d4VVRXNWtibGRET1VsU01sSlJZa2R3VWxaWE9UUmpSMFpUVWtoUmVrNUVWa3BaTUdodFZsVkZlRkZVU2xkYVJrSklXakJ2TVZNeVNtMWlNbXh2VFZWNFIxWlJiM3BsVlhSVFkycEZNRlZYTlVoaVIyaGhWMWRvY1ZwRmFGQk9SRnBXWlVoV1RVMVhSbE5hYlU1WFlWTjBjbEpyTVd4V1JYaFVWbFJvTWxZelZrZFhSV3d4VkRKcmNsUnFVbFprUmtaT1ZsUmtkbUZ0U21sRGJVNU9WakF4UTJWSGREUmlTSEIzVGpOUmVWVlhlRkJXTVhCNldURkZjbUY2YUVsT01uaHVVa1JKTVZwVVNrdGpha1oxWTJwU2NrOVliRXBoYmtwWFkwVktSV05WT1dwVWEyeFZXVzB4U1dSc1ZteE5iWGRMWW1wYU1XRXliRzVXVlU1dVYxVldRazFWYzNsTmF6RktWbFZzVWxkc2NFOU9SRUpNVmxVME5HSlhOREpPTWs1M1ZsTTVhbFl6VW5SV01VSktaVzF3TUZKRVdqWlpNbVJTV21wV01rd3lUbWhYUjFKMVZWRndVR1JGT0RSaVZXeHdZMFJvY0dWRlozZFhha1o1WlVWV2FGZEVhRkZTYmxaV1VUQndiVlF5YUVSbFJWSjNWREZTUjJJemNFWk9ibEpOVXpGa2RXVllaREpsYlhBMlpVYzVkbUZyTVdoWFF6bHFaRzVTYVVOc1dYZGFXRXBGWXpOa2QwMVVaRE5sU0d0NVkwaEdZVTlIV25STlJURm9XbXhLYjFsWVJYcGpSR1JRVFRJMWQwc3hUbmxqUmxKdlRqQXdkbFJIYkVKU2VtUnBVbFZzZFZWdFRrUmFNV3hHVVZoV1ZGZHFZMHRaYTBaUFlsTjBlbVJGTURWWk1VWnVUbTB4YVZveVNsWk9NbFpIV2pCa2NXSkVaSE5PUmxaelpGUkpOVTFGVGpKV1JFNHpUMFJvZFZsWE9YRmFhWFJRVDBSb00xUkVhRUpPUjA1WVYwY3dORlpXVmxSVFVYQkxaRlJPU0ZaSFpFOVRiVEIyVWtWUk0wOVZWVEJrYVRsTFV6TmtXV0ZyTlZsUFNGWkxaREZWZWxZd2VGcFRiVkpwVjFOMFZGWklRa1JpV0VaNVdWZGFTbEpUZEZSVE1GSk1ZbXhLVVZWcVFtRlZSWGhwUTJwS1dsUkZPSEpTVkdSUVVrWkdSRTVYYUZSamEwNWFaRk01YUdOWFpFTlViV3hSVmtWdk1sSnNUbWxhUjJnMFUwZDBkR013VG01WFZVcERUVzFTYkZKSGFIUk5WMDVDVjBWbmQxZERPVlpVVnpsUlREQkpTMVl3WkVaVlIyUjFUa2RuZDA1dGFGUlVlbFoyVkVVMVNWbHJTVE5WU0VKRllsZGFlbU5wYzNaaE1taHRXa1pvTmxacmQzaGpWV3gzVlVWMFRVMHlXbkJrVjJSeFkwaEtZVnBEZEdwU01XeFZUVVZuTlZGM2NFUlJNbFpRVFhwck5WTlVWbkJVTUhCd1ZVYzVia3N6YjNoYWJtZDJUVEJhZVZsV1JYSmpNbEY0VVRGYVVtTkVhelZpYTFZeFZVaHdUbGx1Y0U1VWF6VnZaR3hDVG1WV1FrNWFhVGxKWld0U2RGWXdTbnBEYXpsMVlrVnNTbUZGVm5CTU0zQnlXVE5zTTFkSFJreGtXRVpGVFd4R1RGRnRaRWxqYW1RelZGZGFSR0ZZVG5GV1EzUnFUakZaTlZKSFRYWlNia0l6VWxSU05Wb3lhelZqUlRSNFl6TnNUR0ZIT1ZSak1tOUxWMVZWY2xwcVduaGtibkJ0VjFoRmQwMUhjRkZTTTFacFdYbHpNbEpFVGxobFdGWXpVVlp3WVV3eFpFaFZSR2hDVFd0R2JtTkZkRlZOVldNMFVrZE9NbU50VWtOVWJWWnBUVEJSTWxaVlVuZGFibHBwVWtGd01sWXdOWE5TYlRSNlpVWkJNRlZJVWpOaGVrSjJVa2RHUjA5VVVYWldlbXgwWkRCNGNFd3lOSHBSVjNSclUxVmtTMkl3Um5KaVNHaG9VMjF3U2sxVlVsbFZlVGxJUzNwa2RGZHNRWFpWYVRsSlkyeE9ZVU50TlVaU1JGWkNZakJrUWxOSFRsVk5SWGhVVTFob2NtRnRiRXhOTUhSUVlsWm9lRmRVWkVsa2FteE9ZVlJvTWxGdVozSk5WWGg0VG0weE1GTkVRWGRXU0ZKcVVXNWFia3d5ZHpKVFZtUnVUVEZ3VkU0eVZVdGhia0pHVGtkUmNsZHRTa1JVTWxwT1pEQmFUVnB0VmxCbFNFNUxWRVZLV1dGdE9WTlRWbFpDV1ZWME1FMXNUbmRhUlRWVlZHeHNTMU5GZERWWFZteEtXV3MxVkZWWE9ESlRNblF3VWxoa01GSllaelJsUVc5MllUQm9OVTVGVmtwVWJFWlJaRWRXTVZORmNFNWlhbWN6V25wcmVWUkZUalphYkZKdVRrYzVjVmR0U2tWTGVrSjFUVWRWTTFkVlZrNWtNRGxEV210a1VWcFlZemxEYVRCMFRGTXdkRkpWTlVWSlJrcFVVVk5DVVZWcmJGZFJWbEpHU1VWMFJsZFRNSFJNVXpCMFEybEphVWxuY0U5UlZURkdXREF4UkZnd1JsRlRWamxXVld0M1oxQlRRV2xoU0ZJd1kwaE5Oa3g1T1doalIydDFZbTFHZEZwWE1XcE1iVTUyWWxNNWQyTnRPVzFoVjNoc1RETjBNV1JYYkd0bVUwbExWRVZHUTFkVk1WQlNSamxDVlVWc1psWldTazFKUkRCblNXMW9NR1JJUW5wUGFUaDJXVmhDY0V4dGVHaFpibXgwWWpKUmRXSnRWakJNTTFsNVRETldlbHBZU1habE0xWXhZVmRTT1VsbmNFZFVNRFZWV0RGQ1FsWkZaMmRRVTBGcFdWaEtjRmxYZDNWa1NGSnRTV2R2UzBsNVFYUk1VekJuVlROU05XSkhWV2RqU0d4NlpFaHNjMXBUUVhSTVV6QkxXa2RHZVdGNVFUbEpTRUkxWXpOU05XSkhWWFZSTWpselRHMVNhR050ZEdaYU0wcG9aVkZ3YzJGWFpHOWtRMEU1U1VoQ05XTXpValZpUjFWMVVUSTVjMkl6U25wTWJFNHdXVmhTY0Zrd01VcFhRMmR2WTBoc2VtUkliSE5hVXpWRVlqSjNkVmt6YkdoaWFYZG5ZMGhzZW1SSWJITmFVelZFWWpKM2RXTklWbmxqUjNoc1RFTkNkMlZZVGpCbFYzaHNUR3RPZG1KRE5XNWpiVVkxUzFOclMxbFhUbXBKUkRCblkwaHNlbVJJYkhOYVV6VkVZako0ZG1OdVRYVlZNMUpvWkVkc2FsUlZiRmxMUTJoM1pWaE9NR1ZYZUd4TWEwNTJZa00xYW1WWFJuVk1RMEozWlZoT01HVlhlR3hNYTA1MllrTTFkMlJZU25kaVIxVnpTVWhDTldNelVqVmlSMVYxVVRJNWMweHRTbk5rVjFWelNVaENOV016VWpWaVIxVjFVVEk1YzB4dFpIbFpXR3R3UzFGd2QyUllTbmRpUjFWblVGTkNkMlZZVGpCbFYzaHNUR3RPZG1KSE9YbGplVFZVWkVkR01HRlhUazVUVm1kdlMwaENOV016VWpWaVIxVjFVVEk1YzB4dVFqRmpia0p6V2xOM1oyTkliSHBrU0d4eldsTTFSR0l5ZDNWWmJYZ3hXbE5yY0VOdFNuZGtXRXAzWWtkVloxQlRRbmRsV0U0d1pWZDRiRXhyVG5aaVJ6bDVZM2sxVkdSSFJqQmhWMDVPVTFabmIwdElRalZqTTFJMVlrZFZkVkV5T1hOTWJrSXhZMjVDYzFwVGQyZGpTR3g2WkVoc2MxcFROVVJpTW5kMVdUTnNhR0pwYTNCRFozQnFZa2RHZW1ONVFrUmlNbmMyUTJsQlowbERRa0ZqTTFKb1pFZHNhbUpYVmpCaFJ6bHJRMmxCWjBsRFFtdGFWMWxuVlROc2RGbHRPWE5MU0U0MVlsZEtkbUpEZDJkWk1qbHpUVk4zWjFreU9YTk5hV3MyUTJsQlowbERRV2RKUTBGblkyMVdNR1JZU25WSlIxbHBaVEpPZG1KRVJqbGxNMDQxWWxkS2RtSklNVGRaTWpselRXNHdhVU5wUVdkSlEwSjVXbGhPYkdSRFFUbEpRMlJqVFVSTmVsZDZRblJLZDI5TFNYbEJkRXhUTUdkU2JUbDFXVE5TY0dJeU5YcEpSbFl3WVZkNGNHUkhSbkJqYlZaNlNVTXdkRXhSY0d0YVYxbG5ZVmhPWmxsWFVuUmhWelJ2UzFSdlMwbERRV2RKU0ZKNVpWUnZTMGxEUVdkSlEwRm5TVU5DZVZwWVVqRmpiVFJuV1ROU05XTkhWbnBNYm1Sd1ltMVNjMkpETlhwaFIxWnpZa1JOZVV4cmJIcFdXRTVzWTJ0R2RWRlhVblJoVnpSdlMxTkJPVkJUUVhoRGFVRm5TVU5DYkdWSFRteGpTRkUyUTJsQlowbERRV2RKUTBGblkyMVdNR1JZU25WSlJWcG9Za2hPYkVObmNHdGFWMWxuWXpKV01GZ3lUblJhUmprd1lWaFNjMXBUYURCaFdGSnpXbE5yTmtOcFFXZEpRMEl6WVZjMWEySkhkM1ZoTWxaNVltMVdjMDE2U1hWVk1sWXdVVEk1ZFdNeU9YTmFWbEp3WkVkNGJGWjVhREJoV0ZKeldsTnJTME50VW14YWFVSjZXbGMxYTFneU1XeGpNMDVvV2pKV1ptUkhPV1phUjJ4NldUSTVlVnBEYUhSYVdFNTZXVmRrYkV0VWIwdEpRMEZuU1Vkc2JVbEhlR3hpYVdoMFdsaE9lbGxYWkd4TFUwRXJTVVJKTVUxRWIwdEpRMEZuU1VOQlowbERRblJhV0U1NldWZGtiRWxFTUdkaVYxWjZZekpHYmxwV2N6Wk5hbFYzV0ZGdlowbERRV2RqUjBZMVlrYzVhRnBEUVRsSlNITnBXVEk1ZFdSSFZuVmtRMGsyU1VjeGJHTXpUbWhhTWxZNVEybEJaMGxEUWpCamJtczJRMmxCWjBsRFFXZEpRMEZuWTIxV2VtTkhPWFZqTWxWblVGTkNlVnBZUmpGYVdFNHdZM2sxZDJJelRqQkxSbVJHVVd0b1VGUXdkR1pXVmtwTlRFTkNjV015T1hWUVdFSm9aVmQ0ZGxsWFVYQkRhVUZuU1VOQlowbERRV2RqYlZaNlkwYzVkV015VlhWamJVWndZekpXWmxwdE9YbFlNMDR3V1ZoU01XTjVaM0JEYVVGblNVTkJaMGxEUVdkalNFcHdZbTVSYjFwcFNqZGpTR3g2WkVoc2MxcFROVVJpTW5kMVkyMVdhMlpWTVd4ak0wNW9XakpWWjFwWE5USmlNMjVFY1ZOQ2FHUnRWbXBKU0U0eFdUSlFSSEZJVFhWbE0wSTFZek5TTldKSFZYVlJNamx6VEc1S2JHTXlWakJtVTBsd1EybEJaMGxEUW14bFIwNXNZMGhSWjJOdFZuaGtWMVo2WkVoTmRWcFlhR3BhV0VJd1lWYzVkV041TlZOYVdFWXhXbGhPTUZKWWFHcGFXRUl3WVZjNWRVbEhSbnBKUjFVMlEybEJaMGxEUVdkSlEwRm5ZMGhLY0dKdVVXOWFhVW8zWTBoc2VtUkliSE5hVXpWRVlqSjNkV050Vm10bVZWWjVZMjFXTVdOcFFuTmlNMHA2U1VkU2JFbEhkMjVhVnpVeVlqSnJaMXBJVldkaVYxWjZZekpHYmxwVE5HZFJNamxyV2xOQ2ExcFRRbnBrUjBZd1pGaFJaMDlwUWpkamJWWjZZMGM1ZFdNeVZYVmpNMUpvWkVoV2VsZ3lUblphUjFZNVRHNTBkMlZZVGpCbFYzaHNUR3RPZG1KRE5YbGFXRTVzWkVnd2FVdFJiMmRKUTBGbldtMXNkVmxYZUhObFZHOUxTVU5CWjBsRFFXZEpRMEl3WVZjeGJFeHVUbk5hVjFaM1MwUkZjRU5wUVdkSlEwRm5TVU5CWjJNelRtOVlNazUyWW0wMWJGa3pVbVpaVnpWcldESldORnBYVGpGa1IxVnZTMUZ2UzBOdFVteGFhVUo2WkVkR2JscFRhREJhV0dnd1QybENlbVJJU1hOSlNFNDFZbGRLZG1KRWIyZGpNMUo1U1VRd1owcDVOSFZNYVdOelNVZE9kbUpFUlRsaVIyeHVZVWhSYzBsSFRuWmlSRWs1VkcwNWRWcFRhMmRNVkRSbll6TlNlVTluYjJkSlEwRm5ZVmRaWjFreU9YTk5hVUp3WTNsQ1QySXlOV3hQWjI5blNVTkJaMGxEUVdkSlIwNTJZa1JKWjFCVFFuTmhWMlJ2WkVOQ2NGcHBRbnBsVnpGcFlqSjNaMUJVTUdkS2VUUjFUR2xqWjFwWGVIcGFVMEozWkZoS2QySkhWVXRKUTBGblNVZHNiVWxJVGpWaVYwcDJZa05DY0dKcFFqZEtlVFIxVEdsamMwbERZMmhKVTBWdVpsUnZTMGxEUVdkSlEwRm5TVU5DZVZwWVVqRmpiVFJuV21sSlowbERRV2RKU0hSRVlqSjNkVlV6YkhSWmJUbHpTMGhPTldKWFNuWmlRM2RuV1RJNWMwMVRkMmRhUjBaNVlYbHNPVWxJZEdwaU1uZDVabGgwTUZwWWFEQm1XSFJFWWpKM2RXTnRWbnBhV0ZJNVNXZHZaMGxEUVdkYVYzaDZXbFJ2UzBsRFFXZEpRMEZuU1VOQ2VWcFlVakZqYlRSbldtbEpaMlV3VG5aaVF6VlVaVmN4YVdJeWQyOWpNMngwV1cwNWMweERRbXBpTW5kNFRFTkNhMWxZU25KTFdEQm5aVEpPZG1KRVNqbGxNMUpzWlVoU09XVXdUblppUXpWNVdsaE9iR1JJTUdsRFozQnJXbGRaWjFwSFZqQmFWMDR3V0ROYWNHTnVVakZaVjNobVlsZEdhbUZIYkhWYVUyZHdUMmR2WjBsRFFXZGtTRW8xVDJkdlowbERRV2RKUTBGblNVZG9kbU16VW5WWlZ6RnNTVVF3WjJNeU9XcGhNbFl3VEcxa2JHUkhhSFpqTTFKMVdWY3hiRXREYTB0SlEwRm5TVU5CWjBsRFFubGFXRkl4WTIwMFowbHVXblJrTWtaNVdsTkpaMkZYTkdkaFJ6bDZaRWMxYUdKWFZYVmlSemt6V2xoSmIwdFRRblpqYVVGcFpHMXNlV1JJVm1oaVEwbG5ZVmMwWjJGSE9YcGtSelZvWWxkVmRXSkhPVE5hV0VsdlMxRnZaMGxEUVdkYVdHaHFXbGhDTUVsRlZqUlpNbFozWkVkc2RtSnBRbWhqZVVKc1QyZHZaMGxEUVdkSlEwRm5TVWhLYkdSSVZubGlhVUpIV1ZkNGVscFJiMHRhUjFadFNVZEdhMXBHT1RCYVZ6RjNXRE5TZGxneVZqUlpNbmd4WXpKc2RtSnVUVzlMVkc5TFNVTkJaMGxJVW5sbFZHOUxTVU5CWjBsRFFXZEpRMEl3V2xjeGQxZ3pRbWhrUjJkblVGTkNkbU41Tlc1YVdGSnNZbTVaYjBsc1VrWlVWa0ZwUzFGdlowbERRV2RKUTBGblNVaE9OV016VW14aVZFMTVXRE5DYUdSSFoyZFFVMEoyWTNrMWQxbFlVbTlNYlhCMllWYzBiMkl6VFhWYU1sWXdXbGMxTWt0RFNsUmxXRTR3V2xjeFUySXlPVEJKYVd0elNVTktWR1ZZVGpCYVZ6QjZUV2xKY0VOcFFXZEpRMEZuU1VOQloyTXpVbWhqYmxJeFkwWTVkMWxZVW05SlJEQm5Zak5OZFdOSFJqQmhRelZ4WWpKc2RVdEhPWHBNYldSc1pFZFdkV1JwWjJsUlZrSlJVa1ZHVlZGVFNYQk1RMEZwVkZkc2FtTnRPWHBpTWxvd1NXbDNaMGxzWkhCaWJWSjJaRE5OYVV4RFFXbFZNMUpvWTI1UloxUlhWblZrVTBselNVTktVV050T1c1amJVWjBZM2xKYzBsRFNsUmtSMFo1WkVoV2QwbHBhMHRKUTBGblNVTkJaMGxEUW1waU1qRjBXVmMxYTJONVFUbEpSbk5MU1VOQlowbERRV2RKUTBGblNVTkJaMXBwU2tKYVIxRjBWRmhDVVdOdFZtMWFXRXBzWW0xT2JFbERNVVpsUjA1elpGaE9jR0l5TlZGWldGSnZTVU5rTjJSSFZuUmpSamwzV1ZoU2IyWlRZMmROYWpSclltNVdjMkpEU1hORGFVRm5TVU5CWjBsRFFXZEpRMEZuU1VkWmFWRlhVbXRNVlRGM1ZVaEtiRnB0Vm5sYVZ6VnFXbE5CZEZKWWFHcGlTRlo2WVZjNWRWVkhSakJoUTBGdVpUTk9OV016VW14aVZFMTVXRE5DYUdSSGFEbEtlVUY1VUdsU2RXUlhlSE5KYVhkTFNVTkJaMGxEUVdkSlEwRm5TVU5CWjFwcFNrSmFSMUYwVkZoQ1VXTnRWbTFhV0Vwc1ltMU9iRWxETVVabFIwNXpaRmhPY0dJeU5WRlpXRkp2U1VOa04yTXpVbWhqYmxJeFkwWTVkMWxZVW05bVUyTm5UV28wYTJKdVZuTmlRMGxMU1VOQlowbERRV2RKUTBKa1EybEJaMGxEUVdkSlEwRm5XbTA1ZVVsSFRuWmlWekZvWW0xUloyRlhOR2RaTWpsMFlsZEdkVnBJVFRaRGFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoT01WbHVRbmxpTWs1c1l6Tk5kV051Vm5WTFJuTnBZMGM1TTFwWVNucGhSMVp6WWtOSmMwbERTWFJSTWpsMFlsZEdkVnBEU1hOSlIwNTJZbGN4YUdKdFVtUk1RMEpxWVVkV2FtRjZNVlZqYmxac1RFTkNlbUZIVm5OaVJERlZZMjVXYkV4RFFucGtSMUpzWTI1Sk9XTXpWbWxqU0VwMldUSldlbU41TlVWU1ZscFBWbFY0VFV0UmIyZEpRMEZuV2xob2FscFlRakJKU0U0eFdXNUNlV0l5VG14ak0wMTFVVEpHYzJKSFZtdFZTRXAyV1RKV2VtTXdWbmxqYlRsNVNVZEdla2xIVlRaRGFVRm5TVU5CWjBsRFFXZGpSMFo2WTNkdlMwTnRVbXhhYVVKcllqTmtkV0pIT1doYVJqbG9ZbTFTWmxwWWFHeFpNMVl3V2xOb01XTnRkM05KUjFwd1lrZFdkVmxYTVd4TFZHOUxTVU5CWjBsSVVubGxWRzlMU1VOQlowbERRV2RKUTBJd1dsY3hkMWd6UW1oa1IyZG5VRk5DZG1ONU5XeGlibHB3WTIwNWRWZDVaRlZTVlRGUlNqRXdTMGxEUVdkSlEwRm5TVU5DYldGWGVHeFlNMEpvWkVkbloxQlRRblpqZVRWM1dWaFNiMHh0Y0haaFZ6UnZaRWRXZEdOR09YZFpXRkp2VEVOQ2JXRlhlR3hpYlVaMFdsTnJTMGxEUVdkSlEwRm5TVU5DTVdOdGVITmhWMGwxWTIxV2VHUlhWbnBrUXpVeFkyMTRlVnBZVW5saFYxWXlXbE5vTVdOdGQzTkpSMXB3WWtkV1ptTkhSakJoUTJ0TFNVTkJaMGxEUVdkSlEwSjZaRmRLZDJOdE9XcGFXRTU2VEc1S01XSnBhRzFoVjNoc1dETkNhR1JIWjNOSlIwNXZXbGRPY2xCV1VubGtWMVZ3UTJsQlowbERRbXhsUjA1c1kwaFJaMUpZYUdwYVdFSXdZVmM1ZFVsSFJucEpSMVUyUTJsQlowbERRV2RKUTBGbll6Tk9iMWd5VG5aaWJUVnNXVE5TWmxsWE5XdFlNbFkwV2xkT01XUkhWVzlMVVc5TFdrZFdiVWxJU2pGaWJEbG9ZekU1YUZwSE1YQmlhV2gzWTIwNWJtTnRSblJMVkc5TFNVTkJaMGxJVW5sbFZHOUxTVU5CWjBsRFFXZEpRMEl3V2xjeGQxZ3pRbWhrUjJkblVGTkNkbU41TlhkWldGSnZURzF3ZG1GWE5HOWlNMDExV2xjMU1tRllTblppYkhOdVZrVldUbFZEWkdSTVEwSjNZMjA1Ym1OdFJuUkxVVzluU1VOQlowbERRV2RKUjA1MllsY3hhR0p0VVdkUVUwSnRTV3hPTUZsWVNqQk1Wa0o1WWpKT2JHTXpUV2RLTTNRd1dsY3hkMWd6UW1oa1IyZzVTbmxCZEZadFZubFphVUpUWkZjMVFtTjVTVXRKUTBGblNVTkJaMGxEUW5wa1YwcDNZMjA1YWxwWVRucE1ia294WW1sb1lrbHVRblprTWxaNVl6Sm9iR0pIZDJsTVEwRnBURlZPZG1KWE1XaGliVkZwVEVOQ2FtSXlNWFJaVnpWcldGTjNaMWt5YUd4Wk1uTTVVbTFHYzJNeVZYTkpTRTV2V2xkNGMxQlZXbWhpU0U1c1MxRnZaMGxEUVdkYVdHaHFXbGhDTUU5bmIyZEpRMEZuU1VOQlowbElUbnBoUmpscVlqSTFkVnBYVGpCWU1rWjFXa1k1YkdWSFZtcGtXRkpzUzBOclMwTnVRbkJpYldSbVkyMVdlbVJYZURCamVVRTVTVWgwT1VOdFVteGFhVUozWVZjMWJsZ3liSGRMUjJ4M1MxUnZTMGxEUVdkSlIyeHRTVWRzZDBsSGJIVkpTRUp3WW0xa1ptTnRWbnBrVjNnd1kzcHZTMGxEUVdkSlEwRm5TVU5DZVZwWVVqRmpiVFJuWTBkc2RWb3hPWGxhV0U0eFlraFNlbGN5YkhkWVVXOW5TVU5CWjJSSVNqVlBaMjluU1VOQlowbERRV2RKUnpreFpFaENNV1JEUVRsSlNFNHhXVzVDZVdJeVRteGpNMDExWTI1V2RVdEdjMjVqUjJ4MVdubGpjMGxEWTNSaWFXTnpTVU5qZUVwNWQyZGhXRUprVEVOQ2FsbFlRakJrV0Vwc1dESTVNV1JJUWpGa1JERlZZMjVXYkV4RFFqQmFXR2d3VUZaU2VXUlhWWE5KU0ZKd1lsZFdkbVJZVVRsTlF6UXdTMUZ2WjBsRFFXZEpRMEZuU1VoS2JHTXpWbk5rUTBFNVNVYzVNV1JJUWpGa1F6VjVXbGhTTVdOdE5XcGlNbEpzU1VRd09VbEVRVXRKUTBGblNVTkJaMGxEUW5kaFZ6VnVXRE5LYkdNelZuTmtTRTVpWVZoQ1pFbEVNR2RqYlZaNlpGZDRNRU5wUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VoS2JHTXpWbk5rUVc5blNVTkJaMXBZYUdwYVdFSXdTVWhPTVZsdVFubGlNazVzWXpOTmRWWkhiSFJhVnpreFpFVldOR05IYkhsYVYxRTJRMmxCWjBsRFFXZEpRMEZuWTBkc2RWb3hPWGxhV0U0eFlraFNlbGN5YkhkWVUwRTVTVVZhYUdKSVRteERhVUZuU1VOQlowbERRV2RqYlZZd1pGaEtkVWxGV21oaVNFNXNRMmR3YTFwWFdXZFpNamx6WWpOS1ptRllRVzloV0VGelNVaFNiR1ZJVVhCUFoyOW5TVU5CWjJOdFZqQmtXRXAxU1VoU2JHVklVWFZqYlZaM1lrZEdhbHBUYUhCalEzZG5ZMGhzZW1SSWJITmFVelZFWWpKNGRtTnRSakJhVXpWRVlqSjRkbU5wYUhkbFdFNHdaVmQ0YkV4clRuWmlSemw1WTNrMWJtTnRWbXhpYVVKd1dtbENkMkZYTlc1WU1teDNTMGRzZDB0VFFteGlTRTVzU1VoQ05XTXpValZpUjFWMVVUSTVjMkl6U25wTWJrcHNXa04zWjJGWVFYQkxVVzlMV2tkV2JVbEhXbkJpYlZKbVdWYzFhMWd6UW5CaWJXUm1ZVmhDZWt0SFRuWmliazUyWWtkV1ptSXpWakJqU0ZZd1MxUnZTMGxEUVdkSlIyeDNXRE5DYUdSSVVteGpiVFJuVUZOQ2VWcFROV3BpTWpGM1lWZDRiRXRJU1c1WVIwbHZVSHB3WWsxRE1EVllXSE40VEVST09WaEROSEJsZWs0NVYzcEJkRTlXTVRkTlUzZDZabFo0YVVwNWEwdEpRMEZuU1VjeGFHUkhUbTlhV0UxblVGTkNjR05HT1hkWldGSXdXbGhLZFV4dFduQmliVkpvWWtkM2Ixa3lPWFZqTWpseldsWTVkbVJZVW5ka1dGRndRMmxCWjBsRFFtMWlNMGxuWVZoQloyRlhOR2RpVjBZd1dUSm9iR042YjB0SlEwRm5TVU5CWjBsRFFtcGlNalY2WWpKNGJGZ3lPVEZrU0VJeFpFTkJPVWxIVG5aaVJ6bDVXREpzZDB0SGJIZE1RMEpxWWpJMWVtSXllR3hZTWpreFpFaENNV1JEYTB0SlEwRm5TVWhLYkdSSVZubGlhVUpxWWpJMWVtSXllR3hZTWpreFpFaENNV1JCYjB0YVIxWnRTVWN4YUdGWE5XWmFibFoxV1ROU2NHSXlORzlMVkc5TFNVTkJaMGxIYkcxSlIxSnNaRWRXYW1SR09USmhXRW93WkZkR2MxZ3lNV2haTW1od1ltMVZiMHRVYjB0SlEwRm5TVU5CWjBsRFFucGxXRTExV2xob2NHUkRaM0JEYVVGblNVTkNhRnBIVW1aa1IxWjBZMFk1TUdJeE9XeGxSMDV6WkZoT2NHSXlOWHBMUTJ0TFNVTkJaMGxJVm5saVEwRTVTVU5LYjJSSVVuZGplbTkyVEROS2FHUjVOVzVoV0ZKdlpGZEtNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakIyV1ROV2QySXlXakJhVjBab1RVUm5kbGxZVmpCaU1qRndZbTFXZDFwWVNuUmhXRTU2WVZjNWRVd3lNV2hoVnpSMldWaFdNR0l5TVhCaWJWVnNUV3BDYzJGWE5YSk1ibEkwWkVOSlMwbERRV2RKU0ZKNVpWUnZTMGxEUVdkSlEwRm5TVU5DZVZwWVRuZGlNalY2V2xOQk9VbElWbmxpUjNod1dXazFlVnBZUmpGYVdFNHdURzVXZVdKSE9YZGFWelJ2WkZoS2MwdFJiMmRKUTBGblNVTkJaMGxIVW5aa01qVnpZakpHYTFnelZubGlRMEU1U1VoS2JHTXpRblppYms1c1RHNUtiRmxYVVc5TFV6VnJXbGRPZGxwSFZXOUxVelY2WkVoS2NHTkRaM0JEYVVGblNVTkJaMGxEUVdkamJWWjZZMGM1ZFdNeVZYVlpNbmgyWXpKVmIwdFJiMmRKUTBGbldsaG9hbHBZUWpCSlJWWTBXVEpXZDJSSGJIWmlhVUpvWTNsQ2JFOW5iMmRKUTBGblNVTkJaMGxJUW1oak0wMUxTVU5CWjBsSFduQmlSMVoxV1ZjeGJFbEVNR2RKYkVveFltNVNjR0pYVldkUmJrcDJZVEpXZVV4dFZqUmFVMGxMU1VOQlowbEhVblprTWpWellqSkdhMWd5Um5WYVJqbHNaVWRXYW1SWVVteExSMUoyWkRJMWMySXlSbXRZTTFaNVlrTjNaMXB0YkhOYVZ6Vm9ZbGRWY0VOcFFXZEpRMEo1WkZjMVpsbFlUbVpaVjFKMFlWYzBiMXB0YkhOYVZ6Vm9ZbGRWY0VObmNHaGpNMngxV1hsQ2ExcFhXV2RhYlZZd1dUSm9abUZ1VG5aaWFXaDZXbGhPZW1GWE9YVk1RMEl4WTIxM2NFOW5iMmRKUTBGblpFaEtOVTluYjJkSlEwRm5TVU5CWjBsSFJucGxWelZxU1Voa2NHUkhaMmRqTWxaNll6SnNkbUpwTlc1YVdGRnZaRmhLYzB0VFFtaGplVUo1V2xoT2QySXlOWHBhVkc5TFNVTkJaMGxEUVdkSlEwRm5TVU5CWjJOdFZucGpSemwxWXpKVmRXTnRSbkJqTWxabVdtMDVlVmd6VGpCWldGSXhZM2xuY0VOcFFXZEpRMEZuU1VOQlowbERRV2RKU0Vwc1pFaFdlV0pwUW1oa01rWndaRU5DZVZwWVRuZGlNalY2V2xNMWNXTXlPWFZMUTJ0TFNVTkJaMGxIVmpSWk1sWjNaRU5DYUdGWE9XOWtTRkozVEd0T2MyRlhWblZrUlZaNVkyMDVlVTluYjJkSlEwRm5TVU5CWjBsSVNteGtTRlo1WW1sQ1QySXlOV3hEWjNCb1l6TnNkVmw1UW10YVYxbG5XakpXTUZneU5XaGlWMVptWVVkc2VtUkhPWGxsVTJneFpGZHNhMWd6VGpCamFXczJRMmxCWjBsRFFtaGpNMngxV1hsQ00yRllVbTlKUjBad1lqSm9NR1JJUVhWUk1uaHdXbGMxTUZVeVZucGpNbXgyWW1sbmNFbEhSbnBKU0U1c1l6Tk9jR0l5TkRaRGFVRm5TVU5CWjBsRFFXZGtXRXB6U1VRd1oxUnJSazVTVmpsT1VURTVRbFZGYkdaV1ZrcE5URzFhZG1OdE1XaGtRMmd4WkZkc2ExQllWakZoVjFKbVl6TlNlVXRSYjJkSlEwRm5TVU5CWjBsSFVtaGtSMFZuVUZOQ2FHUXlSbkJrUTBKdFdsaFNhbUZHT1hGak1qbDFTMGhPYkdNelRuQmlNalJ6U1VoV2VXSkRhMHRKUTBGblNVTkJaMGxEUW5CYWFVSnJXVmhTYUVsSFJuVmFRMEZ1WW0xR2RGcFdPVzloV0U0d1lqTktOVXA1UW5CaWFVSnJXVmhTYUU5bmIyZEpRMEZuU1VOQlowbERRV2RKUTBKNVdsaFNNV050TkdkWGVXaHNZbTVTZVdWV2MyNWliVVowV2xOa1pFeERRbXRaV0ZKc1pFZHNkRnBUTlcxamJUbDBaRWRzZEZwWVRqQlpWekYzUzBkV2RXUklTalZYZVdScVlVZEdkVm95Vm10WU1rWXdTakV3WjB4NVFYaE5SRUYzUzFOQ2NGcHBRbXhpYmxKNVpWTTFibHBZVVc5SmJVNXZXVmMxYmxwWFVtWlpXRkZwUzFOQ2JHSklUbXhKUTBwUVkyMXNibUZYTkdsTFUwSnRZak5KWjFwWE5UQmpibXRuWVZjMFoxcEhSakJaVm5OdVltMUdkRnBXT1c5aFdFNHdZak5LTlVveE1XUkRhVUZuU1VOQlowbERRV2RhVjNoNldsUnZTMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGpiVll3WkZoS2RVbEZOWFppYlZWTFdWaE9OV0p0VFdkYVIxWnRTVWRrYkdSR09YTlpWMG8xV0RKc2RWcHRPRzlrV0Zad1drWTVlbVJJU1hCUFoyOW5TVU5CWjFsWVRqVmliVTFuWkRKc01HRkRRbWhoVnpsdlpFaFNkMHhyVG5OaFYxWjFaRVpPYkdNelRuQmlNalJ2UzFOQ2FHTjVRbnBhV0U1NllWYzVkVTluYjJkSlEwRm5TVU5CWjBsSVZubGlRMEU1U1VWNFFsRnNiRTVVTUZKbVVWWkNTbGd4VmxOVVF6VnRZak5LZEZsWVVXOWtXRlp3V2tReE1XUlhiR3RZTTA0d1kybHJTMGxEUVdkSlEwRm5TVU5DYTFsWVVtaEpSREJuV1Zoa2FHRllVV2RhYlZZd1dUSm9abUZ1VG5aaWFXaDZXbGhPZW1GWE9YVk1RMEl4WTIxM2NFTnBRV2RKUTBGblNVTkJaMkZYV1dkYVIwWXdXVk5DYUdKdFVXZEtNMEpvWlZkNGRsbFhVVzVKUjJ4MVNVZFNhR1JIUldkWlZ6VnJTVU5rTVdNeVZubGliVVowV2xOaloyRlhOR2RhUjBZd1dWWnpibU5IUmpWaVJ6bG9Xa05rWkU5bmIyZEpRMEZuU1VOQlowbERRV2RKUTBKNVdsaFNNV050TkdkYVIwWXdXVlp6Ym1OSFJqVmlSemxvV2tOa1pGZDVaREZqTWxaNVltMUdkRnBUWkdSRGFVRm5TVU5CWjBsRFFXZGFWM2g2V2xSdlMwbERRV2RKUTBGblNVTkJaMGxEUVdkamJWWXdaRmhLZFVsRk5YWmliVlZMUTIxU2JGcHBRbTVhVnpWc1kyMUdNRnBXT1doak1rNXdZVlk1YUdOdVVtWmhWekZvV2pKVmIyUkhWalJrUTJzMlEybEJaMGxEUWpCamJtczJRMmxCWjBsRFFXZEpRMEZuWVZjeGJrbEVNR2RUVnpGb1dqSlZkV0p0VmpOTFEyUlRVakJKYmt4RFFXOU9WRUYzVEVOQmVFNVVRWEJNUTBKcVlqSjRkbU5xTUc5TlEzZG5UVU4zWjAxRGEzQkRhVUZuU1VOQlowbERRV2RhUTBFNVNVVnNkRmxYWkd4U1NFcG9aSGsxUldOdFJqTkxSMngwV25sclMwbERRV2RKUTBGblNVTkNiV0l5TlRCSlJEQm5VMWN4YUZveVZrZGlNalV3VEc1U2VXUlhWakJsV0VKc1MwVmFVRlJzVW1aVlJVWlZVME4zWjJNeWJEWmFWREI2VFVOclMwbERRV2RKUTBGblNVTkNhMHh1VW14bFNGRnZTMFJGZDB4RFFURk5RMnR6U1VoU2JHVklVWE5KUjFwMlltNVJPVnB0T1hWa1EzZG5XbTFzYzJKRU1HOU5hbFV4VEVOQmVVNVVWWE5KUkVreFRsTnJjRU5wUVdkSlEwRm5TVU5CWjJGWE1XNU1iazVvWkcxVmIwbHRSbnBaTW14d1dESkdlV1JETlhkaWJXTnBTMUZ2WjBsRFFXZGFXR2hxV2xoQ01FbEZWalJaTWxaM1pFZHNkbUpwUW1oamVVSnNUMmR2WjBsRFFXZEpRMEZuU1VoQ2FHTXpUVXRKUTBGblNVaEtiR1JJVm5saWFVRnBXVmhPYW1GWGJHWlpXRW93VEc1Q2RWcDVTVXREYlZKc1dtbENjR014T1RKWlYzaHdXa1k1TVdSWGJHdExTRkpvWTIxa2JHUkRhelpEYVVGblNVTkNlVnBZVWpGamJUUm5ZMjFWZFdKWFJqQlpNbWR2WTJsa1pWZDZRWFJQVjBWMFdtd3hOMDlJTUhSWGVrRjBUMWRGZEZwc01UZE9TREIwVjNwQmRFOVhSWFJhYkRFM1RrZ3dkRmQ2UVhSUFYwVjBXbXd4TjA1SU1IUlhla0YwVDFkRmRGcHNNVGROVkVvNVNrTmpjMGxJVW1oamJXUnNaRU5yUzBOdFJucGxWelZxU1VkU2JGcHBRbk5pTWpseVpGaEJiMlJIUm5sYU1sWXdTMVJ2UzBsRFFXZEpSMnh0U1Vkc2VsZ3pXbWhpUjJ4cldETldNV0ZYVVc5a1IwWjVXakpXTUV0VWIwdEpRMEZuU1VOQlowbERRbmRqYld4MVpFTm9iVWx1ZEhkbFdFNHdaVmQ0YkV4clRuWmlRelUxV2xkNGMySXpaRGxWYzA5d1dUTldkM2MyYkhsWldGSndZakkwWjFwSFZXZGlRMlJ2WVZoT01HSXpTbkJqV0Zac1NVZFNiRWxITlhaaVUzZG5Xa2RWWjFSSFJtbGxWVEYyV2tOM1oxcFlVV2RaTTB4RWNWZEdNR0ZYT1hWSlIxRnVaRmMwWjFsWVNqQkpSMFo2V1RKc2NFeHVkSGRsV0U0d1pWZDRiRXhyVG5aaVF6VjVXbGhPYkdSSU1HbExVVzluU1VOQlowbERRV2RKUnpWb1lsZFdabUZIYkhwa1J6bDVaVk5CT1VsSFJqTlpWMnd3U1Vka2JHUkdPWFZaVnpGc1dESm9jR016VW5aamJtdHZaRWRHZVZveVZqQkxVVzluU1VOQlowbERRV2RKUjNob1dXNXNabVJZVG14amJUVm9ZbGRWWjFCVFFtaGtNa1p3WkVOQ2JscFlVbVppUjBacFpWWTVjR0p0V25aTFNGSm9ZMjFrYkdSRGEwdEpRMEZuU1VOQlowbERRbkJhYVVKMVdWY3hiRmd5YUhCak0xSjJZMjVyTmtOcFFXZEpRMEZuU1VOQlowbERRV2RKU0VKNVlWYzFNRXRIV1dsbE0wSTFZek5TTldKSFZYVlJNamx6VEcxT05WbFhOVGxUUjJ4NlpFYzVlV0ZZUmpGYVUwSnJXbGhOWjJOSVRteGtWMUoyWTNwd04yTkliSHBrU0d4eldsTTFSR0l5ZDNWamJWWjZXbGhTT1VscGEwdEpRMEZuU1VOQlowbERRV2RKUTBGbldtMDVlVWxITldoaVYxVnpTVWRTYUdSSFZXZGhWelJuWW0xR2RGcFdPVzloV0U0d1lqTktOVTluYjJkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyTklTbkJpYmxGdldtbEpaMGxEUWpkalNHeDZaRWhzYzFwVE5VUmlNbmQxV2pOS2JGcFhOVGxWU0U1c1pGZFNkazl1ZEhkbFdFNHdaVmQ0YkV4clRuWmlRelY1V2xoT2JHUklNR2RsTWpWb1lsZFdPVXhEUWpkalNHeDZaRWhzYzFwVE5VUmlNbmQxV1cxNE1WcFlNVVZaV0ZKc1QyNTBkMlZZVGpCbFYzaHNUR3RPZG1KRE5YbGFXRTVzWkVnd1oyVXlVbWhrUjFZNVNXbHJTMGxEUVdkSlEwRm5TVU5DY0ZwcFFuTlpWMG8xV0ROV2VscFlTblZaVnpGc1QyZHZaMGxEUVdkSlEwRm5TVU5CWjBsRFFuZGpiV3gxWkVOb2JVbHVkSGRsV0U0d1pWZDRiRXhyVG5aaVF6VjBXVmRrYkdKdVVtaG1Wa0o2V2xoV2EySjVRazFaVjBvMVZGYzVhMDl1ZEhkbFdFNHdaVmQ0YkV4clRuWmlRelY1V2xoT2JHUklNR2RsTW5ob1dXNXNabVJZVG14amJUVm9ZbGRXT1VscGEwdEpRMEZuU1VOQlowbERRbWhqTWs1d1lWWTVhR051VW1aalIwWXdZVU5CT1VsSFpHeGliVlo1V1ZoU2JGZ3lSbnBaTW14d1dESkdlV1JHT1hCaVYwWnVXbE5vTUZsWVNtNWFXRkZ3UTJsQlowbERRV2RKUTBGbllWZFpaMWxZVG1waFYyeG1XVmhLTUZnelFtaGtSMmMyUTJsQlowbERRV2RKUTBGblNVTkJaMGxJUW5saFZ6VXdTMGRaYVdVelFqVmpNMUkxWWtkVmRWRXlPWE5NYmtwc1drZ3hRbFV3VGtwVFUwSkNZMjVSWjFvNFQzQmljMDl3WTNOUGNFbEhSakphVjAxbll6TldhbGs0VDI5amVtOW5aVEpHZWxreWJIQllNa1o1WkVZNWQxbFlVbTltV0hSM1pWaE9NR1ZYZUd4TWEwNTJZa00xZVZwWVRteGtTREJwUzFGdlowbERRV2RKUTBGblNVZFdjMk15VlRaRGFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoQ2VXRlhOVEJMUjFscFpUTkNOV016VWpWaVIxVjFVVEk1YzB4dVNteGFTREZHWTI1S2JHUllTV2RpUnpsNVkzbENhMXBUUW5OWlUwSnVkelpzZFhjMmJIbFpXRkp3WWpJMFoxcEhWV2RpUTJSQ1ZUQk9TbE5UUWtKamJsRjFaVE5DTldNelVqVmlSMVYxVVRJNWMweHVTbXhqTWxZd1psTkpjRU5wUVdkSlEwSnNZa2hPYkU5bmIyZEpRMEZuU1VOQ2QyTnRiSFZrUTJodFNXNTBkMlZZVGpCbFYzaHNUR3RPZG1KRE5YbGFWMUk1Vm0xV01XRlhlSE5hV0c5bldsYzFNR050Vm5sSlNGWjFTVVpXVmxOVlVXZGlNMVZuWkZjMFoyTklUbXhrVjFKMlNVaGFhR0pIYkd0YVV6Um5WM2xDUmxScFFrVlNWbHBHVkVVNVVWVkZWazVTVlRWVlNVWXdaMlV6UWpWak0xSTFZa2RWZFZFeU9YTk1ia3BzWXpKV01HWlRTWEJEYVVGblNVTkJaMGxEUVdkSlEwRm5TVUZ2UzFwSFZtMUpTRTU2WVVZNWFtSXlOWFZhVjA0d1dESkdkVnBHT1d4bFIxWnFaRmhTYkV0RGF6WkRhVUZuU1VOQ01HTnVhelpEYVVGblNVTkJaMGxEUVdkalNFcHdaRzFHTUZwV09YSmFXR3htV20xc2MxcFRRVGxKUms0d1kyMXNkVm93YkZCTFJrSlRVMVphUWxaRlZtWlRNRlphUzFGdlowbERRV2RKUTBGblNVaENlV0ZZV21oa1IxWm1ZVEpXTlVsRU1HZGpSMFo1V1ZjeGNHRXlPSFZWYkU1Q1V6SldOVXh0V25saU1qRm1ZMGhLY0dSdFJqQmFWamx5V2xocmIyTklTbkJrYlVZd1dsWTVjbHBZYkdaYWJXeHpXbE5yUzBsRFFXZEpRMEZuU1VOQ2FtSXlOWFZKUkRCblVUSTVkV0p0Vm1wa1IyeDJZbWxuUzBsRFFXZEpRMEZuU1VOQlowbERRV2RoUnpsNlpFUXhWRlV3YUdaVFJUbFVWa04zUzBsRFFXZEpRMEZuU1VOQlowbERRV2RrV0U1c1kyb3hWRlV3YUdaV1ZrNUdWV2wzUzBsRFFXZEpRMEZuU1VOQlowbERRV2RaTWpsMVltMVdhbVJHT1hKa01rWjVXak5OT1dWM2IyZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGx1UW5KYVdHdHBUMmxDZDJOdGJESlpXRkpzV0RKMGJHVlRkMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5abEZ2WjBsRFFXZEpRMEZuU1VOclMwbERRV2RKUTBGblNVTkNNV0p0Ykhoa1YxWm1ZVmRSWjFCVFFtMUpiblIyWTNrMWJscFlVbmRoVjFGdlMxZ3habVV5YkhWa1EyZ3dZVmN4YkV4dVVuQmlWMVZ2UzFOc09VbG5iMmRKUTBGblNVTkJaMGxJU214ak0xWnpaRVk1YldGWGVHeEpSREJuV21sSmRtRkhPWFJhVXpsb1drY3hjR0pwT1VKaVIzaHBXa2RSZG1OdFZucGtWM2d3V1ZoU2VsZ3pkREZpYld4NFpGZFdabUZYVWpsTWJsSTBaRU5KUzBsRFFXZEpRMEZuU1VOQ00yRkhiSE5hVTBKVlkyNVdiRTluYjJkSlEwRm5TVU5CWjBsRFFXZEpRMEozWTIxc2RXUkRhRzFKYm5SM1pWaE9NR1ZYZUd4TWEwNTJZa00xZDJSWVNuZGlSMVk1VVRKVloyTXlUbmxoV0VJd1NVaEtiRmt5YUd4amJVNXZXbE5DYzFwWVRXZGlWMFp4WkZoT2FtUlhlR3hqZVVKc1pFTkNjMXBZVFdkaVYyeDFaRmhPYW1SWGVHeGplWGRuWVZkM1oySnBaRFZKUjBWbldWaFdhbVJYTld4SlIyeDBZMGM1ZVdSSFJuVlpNbFYxU1dsclMwbERRV2RKUTBGblNVTkJaMGxEUVdkalNFcHdZbTVSYjFwcFNqZGpTR3g2WkVoc2MxcFROVVJpTW5kMVkwaFdlV05IZUd4bVZEQTVVRk5DYzFsVFFubGFWMDV2V2xoS2FtRkhWV2RqTWxaNVdWTkNNR056VDI5amVVSnpZakkxYm1SWFZYTkpTSFIzWlZoT01HVlhlR3hNYTA1MllrTTFibU50Vm14aWJqRjNZa2RXYUdNeVZXZGFSemwxV1ZoU2JFbEdWbFJTUmxGblZrWktSRTFxUVRaSlJsSk9UVmRXTVdWRlJtcGxXRXBUVmpCMGFsVnNWbnBUTWpWWllsZGtNRlJJVWpCa1JXUnJUbFZXZUdWVmIyZGxNMEkxWXpOU05XSkhWWFZSTWpselRHNUNNV051UW5OYVdEQTVVRlF3YVV0UmIyZEpRMEZuU1VOQlowbERRV2RKUTBKM1kyMXNkV1JEYUcxSmJuUjNaVmhPTUdWWGVHeE1hMDUyWWtNMWQyRlhOWEptVkRBNVVGTkNVV0l6Vm5sSlNFSm9ZMjE0YkdOcFFtaGtVMEpxWTNOUGNGbFlVbXhrV0VsbmR6WnNhbU50YkRKYVdHODJTVWgwZDJWWVRqQmxWM2hzVEd0T2RtSkROWGxhVjFJNVlsZFdlbU15Um01YVZEUm5aRzA1TUdOdFZXZGlWMVo2WXpKR2JscFRRVGxRVkRFM1kwaHNlbVJJYkhOYVV6VkVZakozZFdOdFZucGFXRkk1U1dsclMwbERRV2RKUTBGblNVTkJaMGxEUVdkaE1sWTFaREk1ZVZwRFFUbEpSMngxWTBoV01FdEhXV2xsTTBJMVl6TlNOV0pIVlhWUk1qbHpURzVDTVdOdVFuTmFXREZHWW01U2VWcFliMmRrVnpSblkwaE9iR1JYVW5aTVEwSldWbFZzUlV4RFFtNWlWMFp3WWtOQ2RtUlRRa3BWUTBGdlkwYzVlbU15YkdsaVIxVm5XVEk1ZEdKWFJuVmFTRTAyU1VkT2MyTjVkMmRhV0dod1pFTjNaMlJZVm5CYVEzZG5ZVWRXYzJORGQyZGlSemwyWVROV2QwbElRbnBhV0ZacllubHJaMDlwUWpkalNHeDZaRWhzYzFwVE5VUmlNbmQxWTIxV2VscFlVamxKYVd0MVl6TlNlV0ZZUVc5TFV6VnpZak5rYkdOcFozQkRhVUZuU1VOQlowbERRV2RKUTBGblNVZHNiVWxIZEd4bFdHUjJZMjFSWjFCVU1HZEpiVTV6WTNsSk5rTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5Zak5OZFdNemJIcGtSMVowUzBOS2FtSklUV2xKUjJ4dFNVYzVla3h0TldoaVYxVm5VRlF3WjBsdE5UQkphVUpzWWtoT2JFbERTbXBpUjFab1kybEpjRU5wUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTBoS2NHSnVVVzlpTTFad1MxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpSMDUyWW01U2NHSnVWbXhEYVVGblNVTkJaMGxEUVdkSlEwRm5TVWRzYlVsSGRHeGxXR1IyWTIxUmRXTXpVbWhqYmxKNlpESnNNR0ZEWjJsaVYxWjZZekpHYmxwVU5HbExWRzlMU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkaVYxWjZZekpHYmxwVFFUbEpSM1JzWlZoa2RtTnRVWFZqTTBKellWaFJiMGx0TVd4ak0wNW9XakpWSzBscGQyZE5VMnhpVFZZd2RXTXpVbmxoV0VGdlMxRnZaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEo2V2xjMWExZ3lNV3hqTTA1b1dqSldabVJIT1daYVIyeDZXVEk1ZVZwRGFIUmFXRTU2V1Zka2JFdFJiMmRKUTBGblNVTkJaMGxEUVdkSlEwSnNZa2RzYlVsSGRHeGxXR1IyWTIxUloxQlVNR2RKYlZZMFlWaFJhVTluYjJkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2VtVllUWFZhV0dod1pFTm5jRU5wUVdkSlEwRm5TVU5CWjBsRFFXZEpSMVp6WVZkWloyRXlWalZrTWpsNVdrTkJPVkJUUVdsa1dGWndXa05KTmtOcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNhbUl5TVhSWlZ6VnJTVVF3WjFkM2IyZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEyUjNZak5rYkdOdVRtOWFWM2h6U25sM1MwbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXNU1WVTUyWWxjeGFHSnRVVzVNUVc5blNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOS1NtSnVXblpoTWxWMFZqSldhVlZ0Vm5oa1YxWjZaRU5CZEZaWVNuQkpRMlJ2WkVoU2QyTjZiM1pNTTBwb1pIazFibUZZVW05a1Ywb3hZekpXZVZreU9YVmtSMVoxWkVNMWFtSXlNSFpaTTFaM1lqSmFNRnBYUm1oTlJHZDJXVmhXTUdJeU1YQmliVlozV2xoS2RHRllUbnBoVnpsMVRESXhhR0ZYTkhaVWJVWjBXbFZvY0dNelVuWmpibXQxWTBocmJrbERNVkJrV0ZKSFlWZDRiRWxEWkU5WlZ6RnNVMGRzZW1SSE9YbGxVelYzWlZOalowOTVRbFJrUjBaNVpFTXhVV050T1dwYVdFNTZTVU14UjJGWGVHeFZSMFl3WVVOQmJsUnRSblJhVldod1l6TlNkbU51YTNWalNHdHVTVVEwYTJKdVZuTmlRMGxMU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlJqQkxTVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUVc5blNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGtTRW8xVDJkdlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVRqRlpia0o1WWpKT2JHTXpUWFZqYmxaMVMwZE9kbUpYTVdoaWJWRnpTVWRPYjFwWFRuSlFWbEo1WkZkVmNFTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DYkdWSFRteGpTRkZuWXpOV2FXTklTblpaTWxaNlkzazFSRmxYZUhOYVYxSlJZMjA1YWxwWVRucFNXRXA1WWpOSk5rTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGpTRXB3WW01UmIwbHJWbmxqYlZZeFkybEJOa2xHUWpWa1IyaDJZbWxDZVZwWVJqRmhXRTExU1dsclMwbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRhY0dKdFJuTmlTR3MyUTJsQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWhPZW1GR09XcGlNalYxV2xkT01GZ3lSblZhUmpsc1pVZFdhbVJZVW14TFEydExTVU5CWjBsRFFXZEpRMEZuU1VOQloxcFhlSEJhYVVKeVdsaHNNMkl6U210SlJEQTVTVU5LYW1KSFZtaGphVWsyUTJsQlowbERRV2RKUTBGblNVTkJaMGxEUVdkaU0wMTFZek5zZW1SSFZuUkxRMHBxWWtoTmFVbEhiRzFKUnpsNlRHMDFhR0pYVldkUVZEQm5TVzAxTUVscFFteGlTRTVzU1VOS2FtSkhWbWhqYVVsd1EybEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZFpNamwxWkVkc2RXUlhWVXRKUTBGblNVTkJaMGxEUVdkSlEwRm5XbGQ0Y0ZwcFFuSmFXR3d6WWpOS2EwbEVNRGxKUTBwcllWaEphVTluYjJkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyTklTbkJpYmxGdlNXbENZMkpwUW1sYVYwWXhXVEk1TVdORFFtdGFVMEpyV1dsQk9FMTVRbU5pYVVsd1EybEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEpxWWpJMU1HRlhOVEZhVVc5blNVTkJaMGxEUVdkSlEwRm5TVU5DYkdKSGJHMUpSM1JzWlZoa2RtTnRVWFZqTTFKb1kyNVNlbVF5YkRCaFEyZHBZa2M1ZG1FelZuZEpRMGx3VDJkdlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5ZMGRHZVdSSVRXZFFVMEp5V2xoc00ySXpTbXRNYms1M1lrZHNNRXREU25OaU1qbHlaRmhCWjBscGQyZE5VMnRMU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlIyeHRTVWQ0YkdKcGFIZFpXRW93WTNscloxQnBRWGhQWjI5blNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VoU2FHTnRaR3hrUTBFNVNVaENhR051VW5wWGVrWmtURzVPTUdOdGJIZExRMnRMU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DYUdNemJIVlpNbXgyVEc1S01XSnBhSE5pTWpseVpGaEJiMlJIUm5sYU1sWXdTMU5yUzBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVZFdjMk15VlRaRGFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblkwaEtjR0p1VVc5YWFVbzNZMGhzZW1SSWJITmFVelZFWWpKM2RXTnRWbXRtVmxwc1pGZHNjMkpIVmpaSlIxWjFaRWhLYkdOcFFqRmlhVUpXVmxWc1JVbEhPVEZKU0ZaMVNVaENlbHBZVm10aWVVSXlXVmQ0Y0ZwSFZXZFpXRUo1ZHpab2VrbERaSE5pTWpseVpGaEJia3h1ZEhkbFdFNHdaVmQ0YkV4clRuWmlRelY1V2xoT2JHUklNR2xMVVc5blNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZFpNamwxWkVkc2RXUlhWVXRKUTBGblNVTkJaMGxEUVdkSlEwRm5XbGQ0Y0ZwcFFuSmFXR3d6WWpOS2EwbEVNRGxKUTBwdldsZDRkMGxxYjB0SlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElRbmxoVnpVd1MwTkpaMGxwYTB0SlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbElRbmxoVnpVd1MwTkpaM2MyYkdwamJXd3lXbGh2TmtsRFFXZEpRMEZuU1VjeGJHTXpUbWhhTWxVclNVTkNjRmt5YTJka2JUa3dZMjFWWjJKWFZucGpNa1p1V2xOQlowbERRV2RKUTBGblNVaENkbVJZU1dkYVJ6bDFZbTFXZVVsSVZuVmFVMEo2WkZka2JscFlUakJoVnpsMVNVaE9NV05wUW5WaU0xSjVXbE5DYTJGWVRtcGlNMHByU1VOSmNFTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DZDJOdGJIVmtRMmRwU1VkT2MyTjVRblprVTBKcVlrZFdhR05wUW5kaU0xWjVTVWRXYlZwdFJtcGFXRWxuWWtOa2FGcHRXbkJaTW1ob1dqSlZaMWw1Wkd4ak0xRm5aRWM1TVdGdE9URmpiazFuWWxkc2JHUllaMmRKYVd0TFNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpTRUo1WVZjMU1FdERTV2RhUjBZd1dWZEthR015VlhWYVdHaHNTVWRVUkhGWVVteFpNMUpzU1VkV01FbElRbkJpYldObllrZFdla2xIYkhkSlRVOW5TVWhhZG1SSVNteEpTRUp6V1ZkT2JFeERRbnBoVTBKc1lrZDRiRWxIVm5wa1EwSXlXbGhLTUZwVFFtcEtNbFo2WkVOQ2VHUlRaR3hpUjNoc1NVaE1SSEZZUW5aaWJWRm5XVmhWWjJOSGJIVmFlVWx3UTJsQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSjNZMjFzZFdSRFoybEpTRTV3U1VkV2MySkhWV2RhV0U0d1NVaEtkbVJYWkd4SlIxWnpZa2RWWjJKdFZXZGpiVlpvV2pKc01FbElRbWhqZVVKb1pGTkNkMkZYTlc1TWFVRnBTMUZ2WjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblkwaEtjR0p1VVc5SmFVSndZa05DYkdNelVXZFpNamwxWXpKV2NHSkhla1J4VTBKcldsTkNkVnBUUW5kWldFMW5XVEo0Y0dOWVZteGphVUpvWkcxV2FrbEhlR2hKU0U1MlpGaEtjR041UW5wa1dFbG5Za05rYUZwdFduQlpNbWhvV2pKVmMwbElUbkJKVFU5dVdWTkNhR051U25Ca2JWVm5XVmhDZDJSWWJHeGxhVUl4WW0xVloxcHRPWEJqZVVKNlpGaEpaMXBYTlRCamMwOXdXbE0wWjBscGEwdEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxJUW5saFZ6VXdTME5KWjFwWVVXZGtXRlp3V2tOQ2Frb3lWbnBrUTBKM1lqTldlVWxJV25aaFdFbG5Za2RWWjJOSVNteGlWMnhzWTJsQ2QyTXlWakZhUnpobldraFZaMWt5T1hSalNGSnNTVWhDZVZwWE1YQmtWekJuV2tkVloySkhSV2RrYld4cVpFZHNkRnBUZDJka2JUa3hZM2xDZDJJelZqSmFXRzluV1RKb2RtTklRbXhqYVVKNllqSTBaMlJZVm5CYVEwSnVZMjFHYWxwVFJFUnZRMFJFY0RKRlowbHBhMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSVFubGhWelV3UzBOSloxcFlVV2QzTm1Sb1NVY3hhR050VG05YVUwSXdZM05QYjJONVFqQmpjMDl2WTNsQ2FXRlhWblZKUjNoc1kzbENWbFpWYkVWSlIwNW9ZMmxDZDFsWVRXZFpiVlo2WWpKc2RVbEhVbXhKUnpGc1pFaFNlVnBUUWpCaU0xWjZTVWQ0YkdONVFuZGpNbFl4V2tjNFowMVRRbmRaV0VsblRWTjNhVXRSYjJkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloyTklTbkJpYmxGdlNXbENjMkl5T1hKa1dFRm5VRWhDZWxwWVZtdGllVUoyWkZOQ01XUlhiR3RRYVVFMlNVaENiR050TVd4a1EwSnJTakk1YVdSSFZuVmhXRWxuWWtOa2IyRllUakJpTTBwd1kxaFdiRWxIVW14amVVSjNZekpXTVZwSE9YcEpSMUl4U1Vkd2RtUlhWakZqYVVKcldsaENNV0ZZVFdkaWJVWjBXbGN4YWtsSFZqQkpTRTUyWW1sQ2QyTXlWakZhUnpoblZFZEdhV1ZWTVhaYVEwbHdRMmxCWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBKM1kyMXNkV1JEWjJsSlIxWXdTVWhXZFVsSFJucFpNbXh3U1VkR2VXUkRRbXhqTTFGbldqaFBjR0p6VDNCamMwOXdUR2xKY0VOcFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkNkMk50YkhWa1EyZHBTVWRvTUdSSVFucFBhVGgyV2tkc2Vsa3lPWGxhUXpWdVduazRNV0ZyTlhGVmVtaHBVekZvYkVsRFNYQkRhVUZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUW5kamJXeDFaRU5uYVVscGEwdEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxIVG5aaWJsSndZbTVXYkVOcFFXZEpRMEZuU1VOQlowbERRV2RKUjJ4dFNVZDRiR0pwYUhKYVdHd3pZak5LYTB0VFFUaEpSRkUyUTJsQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwSjNZMjFzZFdSRFoybFlSelJwUzFGdlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5ZMGhLY0dKdVVXOWFhVW8zWTBoc2VtUkliSE5hVXpWRVlqSjNkV050Vm10bVZscHNaRmRzYzJKSFZqWkpSMVoxWkVoS2JHTnBRbmRpU0ZaNlNVZFNiRWxFVVdkWk1rWjVXVmRPTUhjMmFIbGFXRTExU1dsclMwbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWhDZVdGWE5UQkxRMHBqWW1sSmNFTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5DYW1JeU5UQmhWelV4V2xGdlowbERRV2RKUTBGblNVTkJaMGxEUW1waU1qVjFURzVLTVdKcGFHMUpia3AwU1VNeGJVbElkSGxhV0U0eFlraFNabHB0YkhOYVdEQnBURU5DTTFsWVNuVlFWbEo1WkZkVmNFTnBRV2RKUTBGblNVTkJaMGxEUVdkSlNFNXNXVmhLYW1GR09XcGlNakYwV1ZjMWEwbEVNR2RhYVVwdVkyMVdkMGxETVhsaFUwRnVaVEowYkdWWVpIWmpiVkk1U25sQmRtRkhPWFJhVXpsb1drY3hjR0pwT1VKaVIzaHBXa2RSZGt0cE5UQmxTRkZuVUdsQ04yTnRWbnBrVjNnd1dESmFjR0pIVmpsSlNIZzRTVWRXYW1GSE9HZEtNRVl4V1ROV2RVbElURVJ4V0U0eFlraFNhR1JEUWpCamJUa3haSE5QY0VsRWIzWktlVWxMU1VOQlowbERRV2RKUTBGblNVTkJaMWt5T1hWaWFUVjVaRmMwYjJNeVZtaGpiVTV2V0RKT2RtSlhNV2hpYlZGelNVZG9jRnBIVlRsV1NFb3hXbE5yUzBsRFFXZEpRMEZuU1VOQlowbERRV2RqYlZaNlpGZDRNR041UVRsSlIwNTJZbTAwZFdOdVZuVkxSMWxwV1RKR01FbElkSGxhV0U0eFlraFNabHB0YkhOYVdEQnBURU5DYjJGWFVteFFWbEo1WkZkVmNFeHVUakJhUnpreFpFTTFlbVJJU25CalEyZHdRMmxCWjBsRFFXZEpRMEZuU1VOQlowbEhiRzFKU0Vwc1l6TldjMlJJVFdkWlZ6VnJTVWhLYkdNelZuTmtTRTFuU1ZRd1owbHJSakZaTTFaMVNVaE1SSEZZVGpGaVNGSm9aRU5DTUdOdE9URmtjMDl3U1VSdmRrbHFiMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsSFRuWmlSemw1V2xkU1ptTnRWbnBrVjNnd1kzbEJPVWxIV25CaWJWSm1XVmMxYTFnelFuQmliV1JtWVZoQ2VrdElTbXhqTTFaelpFaE5jRU5wUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQ2QyTnRiSFZrUTJocVlqSjRkbU50Vm10WU0wcHNZek5XYzJSSVRYQkRhVUZuU1VOQlowbERRV2RKUTBGblNVZFdjMk15VlRaRGFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRbmRqYld4MVpFTm5hVkZZVm1wa1Z6Um5ZM05QY0dNelZuTmtSMFl3U1VoU2VXSXpWakozTm10blQyazRhVXRSYjJkSlEwRm5TVU5CWjBsRFFXZEpRMEpxWWpJMWRVeHVTakZpYVdodFNXNUtkRWxETVcxSlNIUjVXbGhPTVdKSVVtWmFiV3h6V2xnd2FVdFJiMmRKUTBGbldsaG9hbHBZUWpCSlJWWTBXVEpXZDJSSGJIWmlhVUpvWTNsQ2JFOW5iMmRKUTBGblNVTkJaMGxIYkhWalNGWXdTME5LUm1OdVNteGtXRWxuV2sxUGNHUkhWbXBrVFU5d1dsTjNaMk50Vm10M05teDBXVmhLZVZsWFpHeEpSMUl4U1VoT2FtTnRiSGRrUXpScFMxRnZaMGxEUVdkSlEwRm5TVWhPZW1GR09XcGlNalYxV2xkT01GZ3lSblZhUmpsc1pVZFdhbVJZVW14TFEydExRMmR3ZG1SWGEyZFFVMEp0U1dsSmFVTnVkSGRsV0U0d1pWZDRiRXhyVG5aaVF6VjVXbGRTT1RSd1lVazBjR0ZKTkhCaFNUUndZVWswY0dGSk5IQmhTVFJ3VjFoSlEwUnBiRzlxYVd4dmFtbHNiMnBwYkc5cWFXeHZhbWxzV21Obk5IQmhTVFJ3WVVrMGNHRkpOSEJoU1RSd1lVazBjR0ZKTkhCaFNUUndZVWswY0ZkWVNVOUxWMmxQUzFkcFQwdFhhVTlMVjJsUFMxZHBUMHRXYkhsRWFXeHZhbWxzYjJwcGJHOXFhV3h2YW1sc2IycHBiRzlxYVd4YVkyZEpUMHRYYVU5TFYybFBTMWRwVDB0WGFVOUxWMmxQUzFac2VVUnBiRzlxYVd4dmFtbHNiMnBwYkc5cWFXeHZhbWxzYjJwcGJHOXFhV3hhWm1sc2IycHBiRzlxYVd4dmFtbHNiMnBwYkc5cWFXeHZhbWxzYjJwcGJGcGpaMGxEUVdjMGNHRkpOSEJoU1RSd1YxaEpRMEZuTkhCaFNUUndZVWswY0ZkWU5IQmhTVFJ3WVVrMGNHRkpOSEJoU1RSd1lVazBjR0ZKTkhCWFdFbEJjbWxzYjJwcGJHOXFhV3hhVkdsc1drUnBiRnBFYVd4dmFtbHNiMnBwYkZwbWFXeHZhbWxzYjJwcGJGcFVhV3hhUkdsc1drUnBiRzlxYVd4dmFtbHNXbVpwYkZweWFXeGFSR2xzV2tScGJHOXFhV3h2YW1sc1dsUnBiRnBFYVd4YVJHbHNXak5wYkc5cWFXeHZhbWxzV2xScGJGcEVhV3hhUkdsc2IycHBiRzlxYVd4YVptbHNiMnBwYkc5cWFXeGFWR2xzV2tScGJGcEVhV3h2YW1sc2IycHBiRnBtYVd4dmFtbHNiMnBwYkZwVWFXeGFSR2xzV2tScGJHOXFhV3h2YW1sc1dtWnBiRzlxYVd4dmFtbHNXbFJwYkZwRWFXeGFSR2xzV2tScGJGcEVhV3hhTTJsc2IycHBiRzlxYVd4YVZHbHNXa1JwYkZwRWFXeGFSR2xzV2tScGJGb3daMGxEUVdjMGNHRkpOSEJoU1RSd1YxSkpRMEZuTkhCaFNUUndZVWswY0ZkU05IQlhZVFJ3VjFFMGNGZFJOSEJYVVRSd1YxRTBjR0ZKTkhCaFNUUndWMWhEZFV0WGFVOUxWMmxQUzFaclUwRm5OSEJoU1RSd1lVazBjRmRTTkhCaFNUUndZVWswY0dGSk5IQmhTVFJ3WVVrMGNHRkpOSEJoU1RSd1YxSkpRMEZuTkhCaFNUUndZVWswY0ZkU1NVTkJaelJ3WVVrMGNHRkpOSEJoU1RSd1lVazBjR0ZKTkhCaFNUUndZVWswY0ZkU05IQmhTVFJ3WVVrMGNHRkpOSEJoU1RSd1lVazBjR0ZKTkhCWFZUUndWMlEwY0dGSk5IQmhTVFJ3WVVrMGNHRkpOSEJoU1RSd1lVazBjR0ZKTkhCWFVqUndZVWswY0dGSk5IQmhTVFJ3WVVrMGNHRkpOSEJoU1RSd1lVazBjRmRZTkhCaFNUUndZVWswY0dGSk5IQmhTVFJ3WVVrMGNGZFlTVU5CWjBsRFFXYzBjR0ZKTkhCaFNUUndWMUpKUTBGbk5IQmhTVFJ3WVVrMGNGZFNTVTlMVjJsUFMxZHBUMHRYYVU5TFYybFBTMWRwVDB0V2JFOUxWbTVSY21sc2IycHBiRzlxYVd4YVJXZEpUMHRYYVU5TFYybFBTMVpyWlV0WGFVOUxWMmxQUzFac1QwdFdhMDlMVm10UFMxZHBUMHRYYVU5TFZtdFRRV2RKVDB0WGFVOUxWMmxQUzFaclUwRm5TVTlMVjJsUFMxZHBUMHRXYkU5TFZtdFBTMVpyVDB0WGFVOUxWMmxQUzFaclpVdFhhVTlMVjJsUFMxWnNUMHRXYTA5TFZtdFBTMWRwVDB0WGFVOUxWbXdyUzFkcFQwdFhhVTlMVm14UFMxWnJUMHRXYTA5TFYybFBTMWRwVDB0V2EyVkxWbTExUzFaclQwdFdhMDlMVm10UFMxWnJUMHRYYVU5TFYybFBTMVpyWlV0WGFVOUxWMmxQUzFac1QwdFdhMDlMVm10UFMxWnVVMEZuU1VOQlowbFBTMVp0ZFV0WGFVOUxWMmxQUzFac2VVUnBiRzlxYVd4dmFtbHNXbFJwYkZvemFXeHZhbWxzYjJwcGJGcFVhV3hhUkdsc1drUnBiRnBFYVd4YU1HZERkVXRYYVU5TFYybFBTMWRwVDB0WGFVOUxWMmxQUzFkcFQwdFdiRTlMVm01bFMxZHBUMHRYYVU5TFZtdFRRV2MwY0dGSk5IQmhTVFJ3VjFKSlEwRm5OSEJoU1RSd1lVazBjRmRTU1VOQlp6UndZVWswY0dGSk5IQlhVa2xEUkdsc2IycHBiRzlxYVd4YVNHbHNiMnBwYkc5cWFXeHZhbWxzYjJwcGJHOXFhV3h2YW1sc1dsUnBiRm96YVd4dmFtbHNiMnBwYkZwRlowbFBTMWRwVDB0WGFVOUxWbXRsUzFkcFQwdFhhVTlMVjJsUFMxZHBUMHRYYVU5TFYybFBTMWRwVDB0V2EyVkxWMmxQUzFkcFQwdFhhVTlMVjJsUFMxZHBUMHRYYVU5TFYybFBTMVpzZVVGblNVTkJaelJ3VjJFMGNHRkpOSEJoU1RSd1lVazBjR0ZKTkhCWFZUUndWMlJKVDB0WGFVOUxWMmxQUzFkcFQwdFhhVTlMVjJsUFMxZHBUMHRYYVU5TFZteDNjbWxzV25KcGJGcEVhV3hhUkdsc1drUnBiRnBFYVd4YVJHbHNXakJuTkhCWFlUUndWMUUwY0Zka1NVTkVhV3hhY21sc1drUnBiRm93WjBsRFJHbHNXbkpwYkZwRWFXeGFNR2RKUTBScGJGcHlhV3hhUkdsc1dqQm5TVTlMVm0xMVMxWnJUMHRXYm1WTFZtMTFTMVpyVDB0V2EwOUxWbXRQUzFaclQwdFdhMDlMVm01VFJHbHNXbkpwYkZwRWFXeGFNR2RKVDB0V2JYVkxWbXRQUzFadVpVdFdiWFZMVm10UFMxWnJUMHRXYTA5TFZtdFBTMVpyVDB0V2EwOUxWbTVsUzFadGRVdFdhMDlMVm10UFMxWnJUMHRXYTA5TFZtdFBTMVpyVDB0V2JsTkJaMGxEUVdkSlQwdFdiWFZMVm10UFMxWnJUMHRXYTA5TFZtNVRRV2MwY0ZkaE5IQlhVVFJ3VjFFMGNGZFJOSEJYVVRSd1YxRTBjRmRSTkhCWFpFTnBRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEZuU1VOQlowbERRV2RKUTBGblpUTkNOV016VWpWaVIxVjFVVEk1YzB4dVNteGpNbFl3WmxOSmFVbG5iMHREYlZKc1dtbENiV0ZYTld0WU1rWjFaRWRzTW1GWVNqRmpNVGx0WWpKNGExcFlTbnBMUjBwb1l6SldabHB0T1hOYVIxWjVTMVJ2UzBsRFFXZEpSMFoxWkVkc01tRllTakZqTVRsMVdWY3hiR041UVRsSlJuTkxTVU5CWjBsRFFXZEpRMEZwVVZoYWFHTXpVV2xNUTBGcFVWWmFTRWxwZDJkSmEwcHdaRWRTYkZwdFZuVmFSMVo1U1dsM1owbHJkR2hqTTBKc1kyNU9jbVZUU1hOSlEwcE9XVEJHYlZwWFZXbE1RMEZwVkcwNWVXUkhPWFZKYVhkblNXeE9kbU5IYUhaamVVbHpRMmxCWjBsRFFXZEpRMEZuU1d0V1ZGSldVV2xNUTBGcFVWaGFjR050UldsTVEwRnBWa2hLYkdKdFVXZFVWMnhxWTIwNGFVeERRV2xTYVRGVVdsZE9NV050VldsTVEwRnBVVEk1ZEdJeVVuWkphWGRuUTJsQlowbERRV2RKUTBGblNXdEtNV0pIZUVoa1YwWjVXa05KYzBsRFNYcE9ha0ZuVmtjNU1GbFhkMmRWTWxacVpGaEtjR1JJYTJsTVEwRnBVVmRSZEZGWVpHaGpiVlZwVEVOQmFWSklTWFZXTWxacFNXbDNaMGxyWTNSU1IwWXdXVk5KYzBsRFNsZGhXRUo1V2xOSmMwbEJiMmRKUTBGblNVTkJaMGxEU2tSaVIwWjBWakpzZFVscGQyZEpiSEIyWW0xV1FtSkhSbmxpVTBselNVTktSR1ZYZUdoaWJVNXNTV2wzWjBsc1pHeFpia3AyWWpOUmFVeERRV2xWUjBaellubENRbUpJVW5aSlJUVnNaRWhrZG1OdGRIcEphWGRuU1d4T05XSlhSblZrUjFacVNXbDNaME5wUVdkSlEwRm5TVU5CWjBsc1RteGlibEp3WW0xV2MxUXlOV3hKYVhkblNXdE9lV0l6Wkd0Vk0xSjVZVmQwYkVscGQyZEphMVowWXpKc2VtSXlXakJKYVhkblNXdG9jR1JITVdoaWJFSjVZbmxKYzBsRFNrZGlNMG93WVZjMWJHUkRTWE5KUTBwSFlWaEtiRkpZYkd4SmFYZG5RMmxCWjBsRFFXZEpRMEZuU1d4d2JHSlhSblZaVTBsTFNVTkJaMGxHTUV0SlEwRm5TVUZ2WjBsRFFXZFpWelV3WVZoYWNHTnVWbnBZTWxwMllrZFNiR051VG1aYVIyeHFaRU5CT1VsSWREbERhVUZuU1VOQlMwbERRV2RKUjFwMlkybENiV0l5ZUd0YVdFbG5ZVmMwWjJJelRYVmlSMng2WkVkU2NHTnBhR2xaV0U1c1dESmFkbUpIVW14amFXczJRMmxCWjBsRFFXZEpRMEZuV201V2MySkdPWGRaV0ZKdlNVUXdaMkl6VFhWalIwWXdZVU0xY1dJeWJIVkxSMHBvWXpKV1pscHRPWE5hUjFaNVRFTkNiV0l5ZUd0YVdFbHdRMmxCWjBsRFFXZEpRMEZuWVZkWloySXpUWFZqUjBZd1lVTTFjR015VW5CamFXaHRaRmQ0YzFnelFtaGtSMmR3VDJkdlowbERRV2RKUTBGblNVTkJaMGxEUW0xaU0wbG5XVmMxTUdGWVduQmpibFo2V0RJMWFHSlhWV2RoVnpSbldWYzFNR0ZZV25CamJsWjZXREkxYUdKWFZucFBaMjluU1VOQlowbERRV2RKUTBGblNVTkJaMGxEUVdkaFYxbG5XVmMxTUdGWVduQmpibFo2V0RJMWFHSlhWWFZpUnpreldsaEpiMHRUUW5CaWFVSnRZako0YTFwWVNYVmlSemt6V2xoSmIwdFViMHRKUTBGblNVTkJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZEpRMEpvWW01U2NHUnRiSGxrV0U1bVdtMDVjMXBIVm5sak1UbHJZVmRPTUZjeVJuVmtSMnd5WVZoS01XTXhPWFZaVnpGc1dGTkJPVWxIV25aaVIxSnNZMmR2WjBsRFFXZERhVUZuU1VOQ2VWcFlVakZqYlRSbldWYzFNR0ZZV25CamJsWjZXREphZG1KSFVteGpiazVtV2tkc2FtUkJiMHREYlZKc1dtbENhMXBYU2pGa1JFVnZTMVJ2UzBsRFFXZEpSMnh0U1VZNVptSnRSblJhVmpsbVNVUXdPVWxEU21aWU1qRm9ZVmMxWmxoNVNUWkRhVUZuU1VOQlowbERRV2RqU0Vwd1ltNVJiMXBwU2pkalNHeDZaRWhzYzFwVE5VUmlNbmQxWTBoV2VXTkhlR3htVkRBNVVGTkNUVmxYTldwYVZ6RnNZbTVSWjFCVU1EbEphV3RMU1VOQlowbERRV2RKUTBKMFdWZHNkVmd5V2pGaWJVNHdZVmM1ZFV0RGEwdEpRMEZuU1VOQlowbERRbmRqYld4MVpFTm5hVkV5T1hWaWJWWTBZVmM1ZFVsSFJqRkpTRTVzWTI1YWJHUllTV2QzTm13d1dWZEtjMkZYVldkWldGcHNXWGxDZW1SWFRtcDNObWg2VEdsSmNFTnBRV2RKUTBGblNVTkJaMk16VG05WU1rNTJZbTAxYkZrelVtWlpWelZyV0RKV05GcFhUakZrUjFWdlMxRnZaMGxEUVdkSlEwRm5TVUZ3YTFwWFdXZGFSMVpwWkZoUmVVdERhelpEYVVGblNVTkNjRnBwUW1aWU1qVm9ZbGRXWmxoNVFUbFFVMEZwV0RFNWRGbFhiSFZZTVRocFQyZHZaMGxEUVdkSlEwRm5TVWhDZVdGWE5UQkxSMWxwWlROQ05XTXpValZpUjFWMVVUSTVjMHh1UWpGamJrSnpXbGd3T1ZCVU1HZFVSMFoxV1RKV2RGcFhOVEJKUkRBNVVGTkpjRU5wUVdkSlEwRm5TVU5CWjJSSGJIUmFVelY2WWtkV2JHTkRaM2hNYWsxNlRubHJTMGxEUVdkSlEwRm5TVU5DZDJOdGJIVmtRMmRwVVRJNWRXSnRWalJoVnpsMVNVZEdNVWxJVG14amJscHNaRmhKWjNjMmJEQlpWMHB6WVZkVloxbFlXbXhaZVVKNlpGZE9hbmMyYUhwTWFVbHdRMmxCWjBsRFFXZEpRMEZuWXpOT2IxZ3lUblppYlRWc1dUTlNabGxYTld0WU1sWTBXbGRPTVdSSFZXOUxVVzlMUTIxc2JVbEdPV1ppYlVaMFdsWTVaa2xFTURsSlEwcG1XREl4YUdGWE5XWlllVWsyUTJsQlowbERRblpqZVRWNlpWaE9NRnBYTUc5SmJsSndaRWQ0YkVsSFVtaGtSMFpwV1ZoT2JFbHBhMHRKUTBGblNVYzVla3h1VGpWak0xSnNZbE5uYVZreWVIcEphV3RMU1VOQlowbElRbmxoVnpVd1MwYzVNV0ZUYTB0SlEwRm5TVWRHZFdSSGJESmhXRW94WXpFNWJXSXllR3RhV0VwNlNVUXdaMXB0YkhWYVJqbG9ZbTVTY0dSdGJIbGtXRTVtV20wNWMxcEhWbmxqZVdkcFVYcHdZMWhHUW5saU1tUjVXVmN3WjFKdGJITmFXRTFwUzFGdlowbERRV2RoVjFsbldWYzFNR0ZZV25CamJsWjZXREphZG1KSFVteGpiazAyUTJsQlowbERRV2RKUTBGbldtMDVlVWxIUm5Wa1Iyd3lZVmhLTVdNeE9YVlpWekZzVEVOQ2JXSXllR3RhV0VwbVltMUdkRnBUUW5CaWFVSm9ZbTVTY0dSdGJIbGtXRTVtV20wNWMxcEhWbmxqZVRWd1pFZFdkR041WjNCUFoyOW5TVU5CWjBsRFFXZEpRMEZuU1VOQ2ExcFhTakZrUkVWdlMxRnZaMGxEUVdkYVYzaDZXbFJ2UzBsRFFXZEpRMEZuU1VOQ2ExcFhTakZrUkVWdlMxRnZQU2NwTG1SbFkyOWtaU2duZFhSbUxUZ25LU2tLJykuZGVjb2RlKCd1dGYtOCcpKQo=').decode('utf-8'))
').decode('utf-8'))
